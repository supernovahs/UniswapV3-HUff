/// @title BitMath library 
/// @author Uniswap <https://github.com/Uniswap/v3-core/blob/main/contracts/libraries/BitMath.sol>
/// @author supernovahs.eth <github.com/supernovahs> 
/// @notice Huff Implementation of BitMath library of Uniswap V3-core 

/////////// DO NOT USE IN PRODUCTION ! ///////////////////


#define macro MOSTSIGNIFICANTBIT() = takes(1) returns(1) {
             
    0x04 calldataload                                           // [x]

    // require x is greater than 0
    dup1 0x00                                                   // [0x00, x, x]
    eq revert_if_zero jumpi                                     // [x]

    // if (x >= 0x100000000000000000000000000000000)
    dup1                                                        // [x, x]
    0x100000000000000000000000000000000                         // [0x100000000000000000000000000000000, x, x]
    gt check_0x10000000000000000 jumpi                          // [x]

    0x80 shr                                                    // [x]
    // return value  (added after each shift left)
    0x80 0x00 mstore                                            // [x]

    check_0x10000000000000000:
            // if (x >= 0x10000000000000000)
            dup1                                                // [x, x]
            0x10000000000000000                                 // [0x10000000000000000, x, x]
            gt check_0x100000000 jumpi                          // [x]

            0x40 shr                                            // [x]
            
            0x00 mload                                          // [r, x]
            0x40 add                                            // [newR, x]
            0x00 mstore                                         // [x]
            

    check_0x100000000:
            // if (x >= 0x100000000)
            dup1                                                // [x, x]
            0x100000000                                         // [0x100000000, x, x]
            gt check_0x10000 jumpi                              // [x]
            
            0x20 shr                                            // [x]

            0x00 mload                                          // [r, x]
            0x20 add                                            // [newR, x]
            0x00 mstore                                         // [x]

    check_0x10000:
            // if (x >= 0x10000)
            dup1                                                // [x, x]
            0x10000                                             // [0x10000, x, x]
            gt check_0x100 jumpi                                // [x]

            0x10 shr                                            // [x]
        

            0x00 mload                                          // [r, x]
            0x10 add                                            // [newR, x]
            0x00 mstore                                         // [x]

    check_0x100:
            // if (x >= 0x100)
            dup1                                                // [x, x]
            0x100                                               // [0x100, x, x]
            gt check_0x10 jumpi                                 // [x]

            0x08 shr                                            // [x]
            
            0x00 mload                                          // [r, x]
            0x08 add                                            // [newR, x]
            0x00 mstore                                         // [x]

    check_0x10:
            // if (x >= 0x10)
            dup1                                                // [x, x]
            0x10                                                // [0x10, x, x]
            gt check_0x04 jumpi                                 // [x]

            0x04 shr                                            // [x]
            
            0x00 mload                                          // [r, x]
            0x04 add                                            // [newR, x]
            0x00 mstore                                         // [x]

    check_0x04:
            // if (x >= 0x04)
            dup1                                                // [x, x]
            0x04                                                // [0x04, x, x]
            gt check_0x02 jumpi                                 // [x]

            0x02 shr                                            // [x]
            
            0x00 mload                                          // [r, x]
            0x02 add                                            // [newR, x]
            0x00 mstore                                         // [x]

    check_0x02: 
            // if (x >= 0x02)
            // dup1                                                // [x, x]
            0x02                                                // [0x02, x, x]
            gt return_after_finish jumpi                        // [x]

            0x00 mload                                          // [r, x]
            0x01 add                                            // [newR, x]
            0x00 mstore                                         // [x]



    return_after_finish:
            0x20 0x00 return

    revert_if_zero:
            0x00 0x00 revert


}
